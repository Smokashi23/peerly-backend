// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
import mock "github.com/stretchr/testify/mock"
import repository "github.com/joshsoftware/peerly-backend/internal/repository"

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// CreateNewUser provides a mock function with given fields: ctx, u
func (_m *UserStorer) CreateNewUser(ctx context.Context, u dto.RegisterUser) (dto.GetUserResp, error) {
	ret := _m.Called(ctx, u)

	var r0 dto.GetUserResp
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterUser) dto.GetUserResp); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(dto.GetUserResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterUser) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGradeByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetGradeByName(ctx context.Context, name string) (repository.Grade, error) {
	ret := _m.Called(ctx, name)

	var r0 repository.Grade
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.Grade); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(repository.Grade)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardOuotaDefault provides a mock function with given fields: ctx
func (_m *UserStorer) GetRewardOuotaDefault(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetRoleByName(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserStorer) GetUserByEmail(ctx context.Context, email string) (dto.GetUserResp, error) {
	ret := _m.Called(ctx, email)

	var r0 dto.GetUserResp
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.GetUserResp); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(dto.GetUserResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: ctx, reqData
func (_m *UserStorer) GetUserList(ctx context.Context, reqData dto.UserListReq) ([]dto.GetUserListResp, error) {
	ret := _m.Called(ctx, reqData)

	var r0 []dto.GetUserListResp
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserListReq) []dto.GetUserListResp); ok {
		r0 = rf(ctx, reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetUserListResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UserListReq) error); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncData provides a mock function with given fields: ctx, updateData
func (_m *UserStorer) SyncData(ctx context.Context, updateData dto.UpdateUserData) error {
	ret := _m.Called(ctx, updateData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserData) error); ok {
		r0 = rf(ctx, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}


func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}