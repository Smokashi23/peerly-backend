// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetActiveUserList provides a mock function with given fields: ctx
func (_m *Service) GetActiveUserList(ctx context.Context) ([]dto.ActiveUser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUserList")
	}

	var r0 []dto.ActiveUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.ActiveUser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.ActiveUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ActiveUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntranetUserData provides a mock function with given fields: ctx, req
func (_m *Service) GetIntranetUserData(ctx context.Context, req dto.GetIntranetUserDataReq) (dto.IntranetUserData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetIntranetUserData")
	}

	var r0 dto.IntranetUserData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetIntranetUserDataReq) (dto.IntranetUserData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetIntranetUserDataReq) dto.IntranetUserData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.IntranetUserData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetIntranetUserDataReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx
func (_m *Service) GetUserById(ctx context.Context) (dto.GetUserByIdResp, error) {
	ret := _m.Called(ctx)

	var r0 dto.GetUserByIdResp
	if rf, ok := ret.Get(0).(func(context.Context) dto.GetUserByIdResp); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dto.GetUserByIdResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: ctx, reqData
func (_m *Service) GetUserList(ctx context.Context, reqData dto.UserListReq) (dto.UserListWithTotalCount, error) {
	ret := _m.Called(ctx, reqData)

	var r0 dto.UserListWithTotalCount
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserListReq) dto.UserListWithTotalCount); ok {
		r0 = rf(ctx, reqData)
	} else {
		r0 = ret.Get(0).(dto.UserListWithTotalCount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UserListReq) error); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserListIntranet provides a mock function with given fields: ctx, reqData
func (_m *Service) GetUserListIntranet(ctx context.Context, reqData dto.GetUserListReq) ([]dto.IntranetUserData, error) {
	ret := _m.Called(ctx, reqData)

	if len(ret) == 0 {
		panic("no return value specified for GetUserListIntranet")
	}

	var r0 []dto.IntranetUserData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserListReq) ([]dto.IntranetUserData, error)); ok {
		return rf(ctx, reqData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserListReq) []dto.IntranetUserData); ok {
		r0 = rf(ctx, reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.IntranetUserData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetUserListReq) error); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, u
func (_m *Service) LoginUser(ctx context.Context, u dto.IntranetUserData) (dto.LoginUserResp, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 dto.LoginUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.IntranetUserData) (dto.LoginUserResp, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.IntranetUserData) dto.LoginUserResp); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(dto.LoginUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.IntranetUserData) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, u
func (_m *Service) RegisterUser(ctx context.Context, u dto.IntranetUserData) (dto.GetUserResp, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 dto.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.IntranetUserData) (dto.GetUserResp, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.IntranetUserData) dto.GetUserResp); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(dto.GetUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.IntranetUserData) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRewardQuota provides a mock function with given fields: ctx
func (_m *Service) UpdateRewardQuota(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRewardQuota")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePeerly provides a mock function with given fields: ctx, authToken
func (_m *Service) ValidatePeerly(ctx context.Context, authToken string) (dto.ValidateResp, error) {
	ret := _m.Called(ctx, authToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePeerly")
	}

	var r0 dto.ValidateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.ValidateResp, error)); ok {
		return rf(ctx, authToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.ValidateResp); ok {
		r0 = rf(ctx, authToken)
	} else {
		r0 = ret.Get(0).(dto.ValidateResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
