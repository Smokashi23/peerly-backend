// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/joshsoftware/peerly-backend/internal/repository"
)

// AppreciationStorer is an autogenerated mock type for the AppreciationStorer type
type AppreciationStorer struct {
	mock.Mock
}

// CreateAppreciation provides a mock function with given fields: ctx, appreciation
func (_m *AppreciationStorer) CreateAppreciation(ctx context.Context, appreciation dto.Appreciation) (repository.Appreciation, error) {
	ret := _m.Called(ctx, appreciation)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppreciation")
	}

	var r0 repository.Appreciation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Appreciation) (repository.Appreciation, error)); ok {
		return rf(ctx, appreciation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Appreciation) repository.Appreciation); ok {
		r0 = rf(ctx, appreciation)
	} else {
		r0 = ret.Get(0).(repository.Appreciation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Appreciation) error); ok {
		r1 = rf(ctx, appreciation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppreciation provides a mock function with given fields: ctx, filter
func (_m *AppreciationStorer) GetAppreciation(ctx context.Context, filter dto.AppreciationFilter) ([]repository.AppreciationInfo, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAppreciation")
	}

	var r0 []repository.AppreciationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AppreciationFilter) ([]repository.AppreciationInfo, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AppreciationFilter) []repository.AppreciationInfo); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.AppreciationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AppreciationFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppreciationById provides a mock function with given fields: ctx, appreciationId
func (_m *AppreciationStorer) GetAppreciationById(ctx context.Context, appreciationId int) (repository.AppreciationInfo, error) {
	ret := _m.Called(ctx, appreciationId)

	if len(ret) == 0 {
		panic("no return value specified for GetAppreciationById")
	}

	var r0 repository.AppreciationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (repository.AppreciationInfo, error)); ok {
		return rf(ctx, appreciationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) repository.AppreciationInfo); ok {
		r0 = rf(ctx, appreciationId)
	} else {
		r0 = ret.Get(0).(repository.AppreciationInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, appreciationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserPresent provides a mock function with given fields: ctx, userID
func (_m *AppreciationStorer) IsUserPresent(ctx context.Context, userID int64) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserPresent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAppreciation provides a mock function with given fields: ctx, isValid, apprId
func (_m *AppreciationStorer) ValidateAppreciation(ctx context.Context, isValid bool, apprId int) (bool, error) {
	ret := _m.Called(ctx, isValid, apprId)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAppreciation")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, int) (bool, error)); ok {
		return rf(ctx, isValid, apprId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, int) bool); ok {
		r0 = rf(ctx, isValid, apprId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, int) error); ok {
		r1 = rf(ctx, isValid, apprId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppreciationStorer creates a new instance of AppreciationStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppreciationStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppreciationStorer {
	mock := &AppreciationStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
