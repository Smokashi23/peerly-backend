// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// CreateNewUser provides a mock function with given fields: ctx, u
func (_m *UserStorer) CreateNewUser(ctx context.Context, u dto.RegisterUser) (dto.GetUserResp, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewUser")
	}

	var r0 dto.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterUser) (dto.GetUserResp, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterUser) dto.GetUserResp); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(dto.GetUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterUser) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGradeByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetGradeByName(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetGradeByName")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardOuotaDefault provides a mock function with given fields: ctx
func (_m *UserStorer) GetRewardOuotaDefault(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardOuotaDefault")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetRoleByName(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserStorer) GetUserByEmail(ctx context.Context, email string) (dto.GetUserResp, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 dto.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.GetUserResp, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.GetUserResp); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(dto.GetUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncData provides a mock function with given fields: ctx, updateData
func (_m *UserStorer) SyncData(ctx context.Context, updateData dto.UpdateUserData) error {
	ret := _m.Called(ctx, updateData)

	if len(ret) == 0 {
		panic("no return value specified for SyncData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserData) error); ok {
		r0 = rf(ctx, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserStorer creates a new instance of UserStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
