// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateAppreciation provides a mock function with given fields: ctx, apprecication
func (_m *Service) CreateAppreciation(ctx context.Context, apprecication dto.Appreciation) (dto.Appreciation, error) {
	ret := _m.Called(ctx, apprecication)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppreciation")
	}

	var r0 dto.Appreciation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Appreciation) (dto.Appreciation, error)); ok {
		return rf(ctx, apprecication)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Appreciation) dto.Appreciation); ok {
		r0 = rf(ctx, apprecication)
	} else {
		r0 = ret.Get(0).(dto.Appreciation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Appreciation) error); ok {
		r1 = rf(ctx, apprecication)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppreciation provides a mock function with given fields: ctx, apprId
func (_m *Service) DeleteAppreciation(ctx context.Context, apprId int32) (bool, error) {
	ret := _m.Called(ctx, apprId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppreciation")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (bool, error)); ok {
		return rf(ctx, apprId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) bool); ok {
		r0 = rf(ctx, apprId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, apprId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppreciationById provides a mock function with given fields: ctx, appreciationId
func (_m *Service) GetAppreciationById(ctx context.Context, appreciationId int32) (dto.ResponseAppreciation, error) {
	ret := _m.Called(ctx, appreciationId)

	if len(ret) == 0 {
		panic("no return value specified for GetAppreciationById")
	}

	var r0 dto.ResponseAppreciation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dto.ResponseAppreciation, error)); ok {
		return rf(ctx, appreciationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dto.ResponseAppreciation); ok {
		r0 = rf(ctx, appreciationId)
	} else {
		r0 = ret.Get(0).(dto.ResponseAppreciation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, appreciationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppreciations provides a mock function with given fields: ctx, filter
func (_m *Service) GetAppreciations(ctx context.Context, filter dto.AppreciationFilter) (dto.GetAppreciationResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAppreciations")
	}

	var r0 dto.GetAppreciationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AppreciationFilter) (dto.GetAppreciationResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AppreciationFilter) dto.GetAppreciationResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(dto.GetAppreciationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AppreciationFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
