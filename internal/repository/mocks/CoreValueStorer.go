// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
import mock "github.com/stretchr/testify/mock"

// CoreValueStorer is an autogenerated mock type for the CoreValueStorer type
type CoreValueStorer struct {
	mock.Mock
}

// CheckUniqueCoreVal provides a mock function with given fields: ctx, text
func (_m *CoreValueStorer) CheckUniqueCoreVal(ctx context.Context, text string) (bool, error) {
	ret := _m.Called(ctx, text)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, text)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCoreValue provides a mock function with given fields: ctx, userId, coreValue
func (_m *CoreValueStorer) CreateCoreValue(ctx context.Context, userId int64, coreValue dto.CreateCoreValueReq) (dto.CreateCoreValueResp, error) {
	ret := _m.Called(ctx, userId, coreValue)

	var r0 dto.CreateCoreValueResp
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.CreateCoreValueReq) dto.CreateCoreValueResp); ok {
		r0 = rf(ctx, userId, coreValue)
	} else {
		r0 = ret.Get(0).(dto.CreateCoreValueResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, dto.CreateCoreValueReq) error); ok {
		r1 = rf(ctx, userId, coreValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreValue provides a mock function with given fields: ctx, coreValueID
func (_m *CoreValueStorer) GetCoreValue(ctx context.Context, coreValueID int64) (dto.GetCoreValueResp, error) {
	ret := _m.Called(ctx, coreValueID)

	var r0 dto.GetCoreValueResp
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.GetCoreValueResp); ok {
		r0 = rf(ctx, coreValueID)
	} else {
		r0 = ret.Get(0).(dto.GetCoreValueResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, coreValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreValues provides a mock function with given fields: ctx
func (_m *CoreValueStorer) ListCoreValues(ctx context.Context) ([]dto.ListCoreValuesResp, error) {
	ret := _m.Called(ctx)

	var r0 []dto.ListCoreValuesResp
	if rf, ok := ret.Get(0).(func(context.Context) []dto.ListCoreValuesResp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ListCoreValuesResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoreValue provides a mock function with given fields: ctx, coreValueID, coreValue
func (_m *CoreValueStorer) UpdateCoreValue(ctx context.Context, coreValueID int64, coreValue dto.UpdateQueryRequest) (dto.UpdateCoreValuesResp, error) {
	ret := _m.Called(ctx, coreValueID, coreValue)

	var r0 dto.UpdateCoreValuesResp
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateQueryRequest) dto.UpdateCoreValuesResp); ok {
		r0 = rf(ctx, coreValueID, coreValue)
	} else {
		r0 = ret.Get(0).(dto.UpdateCoreValuesResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, dto.UpdateQueryRequest) error); ok {
		r1 = rf(ctx, coreValueID, coreValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewCoreValueStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreValueStorer {
	mock := &CoreValueStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}